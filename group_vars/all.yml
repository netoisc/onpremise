working_dir: 3blades/deployment
# image tags
hubserver_image_tag: "{{ hubserver_version | default ('latest') }}"
openresty_image_tag: "{{ openresty_version | default ('on-premise') }}"
docker_stats_image_tag: "{{ docker_stats_version | default ('latest') }}"
notifications_server_image_tag: "{{ notifications_server_version | default ('latest') }}"
logspout_image_tag: "{{ logspout_version | default ('latest') }}"

# app image
hubserver_image: "3blades/hubserver:{{ hubserver_image_tag }}"
openresty_image: "3blades/openresty:{{ openresty_image_tag }}"
docker_stats_image: "3blades/docker-stats:{{ docker_stats_image_tag }}"
notifications_server_image: "3blades/notifications-server:{{ notifications_server_image_tag }}"
logspout_image: "3blades/logspout:{{ logspout_image_tag }}"

# data image
postgres_data_image: busybox:{{ db_version | default('latest') }}

# set user server images
job_py2_image: 3blades/job-py2:latest
job_py3_image: 3blades/job-py3:latest
model_py2_image: 3blades/model_py2_image:latest
model_py3_image: 3blades/model-py3:latest
notebook_scipy_image: 3blades/scipy-notebook:latest
notebook_lab_image: 3blades/jupyterlab:latest

# set datasource images
cassandra_image: cassandra
postgres_image: postgres
mongo_image: mongo
mysql_image: mysql

# set networks
stack_network: threeblades
deployment_network: deployment-threeblades

# set volumes
hubserver_volume: "/workspaces:/workspaces"
docker_socket_mount: "/var/run/docker.sock:/var/run/docker.sock"

# env file
env_file: env

# pull images and set usage strings
pull_images_always: "{{ force_pull_images | default('no')}}"
cassandra_usage: >
          python => \"from cassandra.cluster import Cluster

          cluster = Cluster([''{server.name}''])

          session = cluster.connect()

          rows = session.execute(''SELECT cluster_name, listen_address FROM system.local;'')

          for row in rows:
              print(row)\"
mongo_usage: >
          python => \"from pymongo import MongoClient

          client = MongoClient(''{server.name}'', 27017)

          db = client.test_database

          collection = db.test_collection

          test_id = collection.insert_one({''test'': ''test''})

          print(test_id)\", bash => \"mongo {server.name}\"
mysql_usage: >
          python => \"import MySQLdb

          db = MySQLdb.connect(host=''{server.name}'')

          cursor = db.cursor()

          cursor.execute(''SELECT 1'')\", bash => \"mysql -h {server.name}\"
postgres_usage: >
          python => \"import psycopg2

          conn = psycopg2.connect(''dbname=postgres user=postgres host={server.name}'')

          cur = conn.cursor()

          cur.execute(''SELECT 1'')

          cur.fetchone()\", bash => \"psql -h {server.name} -U postgres\"
